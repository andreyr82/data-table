
let persons = [];
let filterValues = {
  name: [],
  secondName: [],
};

const names = [
  'Абрам', 'Август', 'Адам', 'Адриан', 'Аким', 'Александр', 'Алексей', 'Альберт', 'Ананий', 'Анатолий', 'Андрей', 'Антон', 'Антонин',
  'Аполлон', 'Аркадий', 'Арсений', 'Артемий', 'Артур', 'Артём', 'Афанасий', 'Богдан', 'Болеслав', 'Борис', 'Бронислав', 'Вадим',
  'Валентин', 'Валериан', 'Валерий', 'Василий', 'Вениамин', 'Викентий', 'Виктор', 'Виль', 'Виталий', 'Витольд', 'Влад', 'Владимир',
  'Владислав', 'Владлен', 'Всеволод', 'Вячеслав', 'Гавриил', 'Гарри', 'Геннадий', 'Георгий', 'Герасим', 'Герман', 'Глеб', 'Гордей',
  'Григорий', 'Давид', 'Дан', 'Даниил', 'Данила', 'Денис', 'Дмитрий', 'Добрыня', 'Донат', 'Евгений', 'Егор', 'Ефим',
  'Захар', 'Иван', 'Игнат', 'Игнатий', 'Игорь', 'Илларион', 'Илья', 'Иммануил', 'Иннокентий', 'Иосиф', 'Ираклий', 'Кирилл',
  'Клим', 'Константин', 'Кузьма', 'Лаврентий', 'Лев', 'Леонид', 'Макар', 'Максим', 'Марат', 'Марк', 'Матвей', 'Милан',
  'Мирослав', 'Михаил', 'Назар', 'Нестор', 'Никита', 'Никодим', 'Николай', 'Олег', 'Павел', 'Платон', 'Прохор', 'Пётр',
  'Радислав', 'Рафаил', 'Роберт', 'Родион', 'Роман', 'Ростислав', 'Руслан', 'Сава', 'Савва', 'Святослав', 'Семён', 'Сергей',
  'Спартак', 'Станислав', 'Степан', 'Стефан', 'Тарас', 'Тимофей', 'Тимур', 'Тит', 'Трофим', 'Феликс', 'Филипп', 'Фёдор',
  'Эдуард', 'Эрик', 'Юлиан', 'Юлий', 'Юрий', 'Яков', 'Ян', 'Ярослав', 'Артемий', 'Богдан', 'Болеслав', 'Борис',
  'Бронислав', 'Валериан', 'Валерий', 'Вениамин', 'Викентий', 'Виктор', 'Виль', 'Витольд', 'Владислав', 'Владлен', 'Всеволод', 'Вячеслав',
  'Геннадий', 'Георгий', 'Герасим', 'Герман', 'Глеб', 'Гордей', 'Григорий', 'Давид', 'Дан', 'Даниил', 'Данила', 'Добрыня',
  'Донат', 'Егор', 'Ефим', 'Захар', 'Игнат', 'Игнатий', 'Илларион', 'Иннокентий', 'Иосиф', 'Ираклий', 'Клим', 'Кузьма',
  'Лаврентий', 'Лев', 'Макар', 'Марк', 'Матвей', 'Милан', 'Мирослав', 'Назар', 'Никодим', 'Платон', 'Прохор', 'Радислав',
  'Рафаил', 'Родион', 'Ростислав', 'Сава', 'Савва', 'Святослав', 'Семён', 'Степан'
];

const secondNames = [
  'Смирнов', 'Иванов', 'Кузнецов', 'Соколов', 'Попов', 'Лебедев', 'Козлов',
  'Новиков', 'Морозов', 'Петров', 'Волков', 'Соловьёв', 'Васильев', 'Зайцев',
  'Павлов', 'Семёнов', 'Голубев', 'Виноградов', 'Богданов', 'Воробьёв',
  'Фёдоров', 'Михайлов', 'Беляев', 'Тарасов', 'Белов', 'Комаров', 'Орлов',
  'Киселёв', 'Макаров', 'Андреев', 'Ковалёв', 'Ильин', 'Гусев', 'Титов',
  'Кузьмин', 'Кудрявцев', 'Баранов', 'Куликов', 'Алексеев', 'Степанов',
  'Яковлев', 'Сорокин', 'Сергеев', 'Романов', 'Захаров', 'Борисов', 'Королёв',
  'Герасимов', 'Пономарёв', 'Григорьев', 'Лазарев', 'Медведев', 'Ершов',
  'Никитин', 'Соболев', 'Рябов', 'Поляков', 'Цветков', 'Данилов', 'Жуков',
  'Фролов', 'Журавлёв', 'Николаев', 'Крылов', 'Максимов', 'Сидоров', 'Осипов',
  'Белоусов', 'Федотов', 'Дорофеев', 'Егоров', 'Матвеев', 'Бобров', 'Дмитриев',
  'Калинин', 'Анисимов', 'Петухов', 'Антонов', 'Тимофеев', 'Никифоров',
  'Веселов', 'Филиппов', 'Марков', 'Большаков', 'Суханов', 'Миронов', 'Ширяев',
  'Александров', 'Коновалов', 'Шестаков', 'Казаков', 'Ефимов', 'Денисов',
  'Громов', 'Фомин', 'Давыдов', 'Мельников', 'Щербаков', 'Блинов', 'Колесников',
  'Карпов', 'Афанасьев', 'Власов', 'Маслов', 'Исаков', 'Тихонов', 'Аксёнов',
  'Гаврилов', 'Родионов', 'Котов', 'Горбунов', 'Кудряшов', 'Быков', 'Зуев',
  'Третьяков', 'Савельев', 'Панов', 'Рыбаков', 'Суворов', 'Абрамов', 'Воронов',
  'Мухин', 'Архипов', 'Трофимов', 'Мартынов', 'Емельянов', 'Горшков', 'Чернов',
  'Овчинников', 'Селезнёв', 'Панфилов', 'Копылов', 'Михеев', 'Галкин', 'Назаров',
  'Лобанов', 'Лукин', 'Беляков', 'Потапов', 'Некрасов', 'Хохлов', 'Жданов',
  'Наумов', 'Шилов', 'Воронцов', 'Ермаков', 'Дроздов', 'Игнатьев', 'Савин',
  'Логинов', 'Сафонов', 'Капустин', 'Кириллов', 'Моисеев', 'Елисеев', 'Кошелев',
  'Костин', 'Горбачёв', 'Орехов', 'Ефремов', 'Исаев', 'Евдокимов', 'Калашников',
  'Кабанов', 'Носков', 'Юдин', 'Кулагин', 'Лапин', 'Прохоров', 'Нестеров',
  'Харитонов', 'Агафонов', 'Муравьёв', 'Ларионов', 'Федосеев', 'Зимин', 'Пахомов',
  'Шубин', 'Игнатов', 'Филатов', 'Крюков', 'Рогов', 'Кулаков', 'Терентьев',
  'Молчанов', 'Владимиров', 'Артемьев', 'Гурьев', 'Зиновьев', 'Гришин', 'Кононов',
  'Дементьев', 'Ситников', 'Симонов', 'Мишин', 'Фадеев', 'Комиссаров', 'Мамонтов',
  'Носов', 'Гуляев', 'Шаров', 'Устинов', 'Вишняков', 'Евсеев', 'Лаврентьев',
  'Брагин', 'Константинов', 'Корнилов', 'Авдеев', 'Зыков', 'Бирюков', 'Шарапов',
  'Никонов', 'Щукин', 'Дьячков', 'Одинцов', 'Сазонов', 'Якушев', 'Красильников',
  'Гордеев', 'Самойлов', 'Князев', 'Беспалов', 'Уваров', 'Шашков', 'Бобылёв',
  'Доронин', 'Белозёров', 'Рожков', 'Самсонов', 'Мясников', 'Лихачёв', 'Буров',
  'Сысоев', 'Фомичёв', 'Русаков', 'Стрелков', 'Гущин', 'Тетерин', 'Колобов',
  'Субботин', 'Фокин', 'Блохин', 'Селиверстов', 'Пестов', 'Кондратьев', 'Силин',
  'Меркушев', 'Лыткин', 'Туров'
];

function getRandomInteger(from = -1000, to = 1000) {
  return Math.round(from + (to - from) * Math.random());
};

function getRandomDigit() {
  return getRandomInteger(0) % 10;
}

function getRandomBoolean() {
  return Boolean(getRandomInteger(0, 1));
}

function getRandomName(namesArray) {
  const index = getRandomInteger(0, namesArray.length - 1);

  return namesArray[index];  
}

function getRandomInsurence() {
  const result = [];

  for (let i = 0; i < 12; i++) {
    result.push(getRandomDigit());
  }

  return result.join('');
}

function createPersons() {
  return new Promise((resolve, reject) => {
    let i = 0;

    function generatePersons() {
      do {
        const person = {
          id: i,
          name: getRandomName(names),
          secondName: getRandomName(secondNames),
          merried: getRandomBoolean(),
          medicalInsurance: getRandomInsurence(),
        };

        if (!filterValues.name.includes(person.name)) {
          filterValues.name.push(person.name);
        }

        if (!filterValues.secondName.includes(person.secondName)) {
          filterValues.secondName.push(person.secondName);
        }

        persons.push(person);
        i++;
      } while (i % 1000 !== 0);

      if (i < 1000000) {
        queueMicrotask(generatePersons);
      } else {
        resolve();
      }
    }

    generatePersons();
  })
}

function sorting(a, b) {
  if (a > b) {
    return 1;
  }
  if (a < b) {
    return -1;
  }
  return 0;
}

export async function getPersons(page = 1, amount = 10, sort = {field: '', direction: 'asc'}, searchText = '', filter, refresh) {
  const startIndex = (page - 1) * amount;
  const endIndex = startIndex + amount;
  let searchResult = [];

  if (refresh) {
    persons = [];
    filterValues = {
      name: [],
      secondName: [],
    }
  }

  if (!persons.length || refresh) {
    await createPersons()
  }

  if (sort.field) {
    persons.sort((firstPerson, secondPerson) => {
      if (sort.direction === 'asc') {
        return sorting(firstPerson[sort.field], secondPerson[sort.field])
      } else {
        return sorting(secondPerson[sort.field], firstPerson[sort.field])
      }
    })
  }

  if (searchText || filter.name || filter.secondName) {
    searchResult = persons.filter(item => {
      return (!searchText || (item.name.toLowerCase().indexOf(searchText.toLowerCase()) >= 0 || 
              item.secondName.toLowerCase().indexOf(searchText.toLowerCase()) >= 0 || 
              item.medicalInsurance.toLowerCase().indexOf(searchText.toLowerCase()) >= 0)) &&
              ((!filter.name || item.name.indexOf(filter.name) >= 0) &&
              (!filter.secondName || item.secondName.indexOf(filter.secondName) >= 0))
    })
  } else {
    searchResult = persons;
  }

  return {
    data: searchResult.slice(startIndex , endIndex),
    pagesCount: Math.ceil(searchResult.length / amount),
    filterValues,
  }
}